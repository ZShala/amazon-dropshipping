{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1878bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('amazon-beauty-recommendation.csv')\n",
    "\n",
    "# Display first few rows\n",
    "df.head()\n",
    "\n",
    "# Check for missing values\n",
    "df.isnull().sum()\n",
    "\n",
    "# Display the unique product categories\n",
    "df['ProductType'].unique()\n",
    "\n",
    "df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')\n",
    "\n",
    "le = LabelEncoder()\n",
    "df['ProductTypeEncoded'] = le.fit_transform(df['ProductType'])\n",
    "\n",
    "tfidf = TfidfVectorizer(stop_words='english')\n",
    "tfidf_matrix = tfidf.fit_transform(df['ProductType'])\n",
    "\n",
    "cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n",
    "\n",
    "def get_similar_products(product_id, top_n=5):\n",
    "    idx = df[df['ProductId'] == product_id].index[0]\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "    similar_products = [df['ProductId'].iloc[i[0]] for i in sim_scores[1:top_n+1]]\n",
    "    return similar_products\n",
    "\n",
    "# Example: Get recommendations for a product with ProductId 'B00LLPT4HI'\n",
    "similar_products = get_similar_products('B00LLPT4HI')\n",
    "print(similar_products)\n",
    "\n",
    "def get_filtered_recommendations(product_id, top_n=5, min_rating=4, category='Makeup'):\n",
    "    # Filter the dataframe based on min_rating and category\n",
    "    filtered_df = df[(df['Rating'] >= min_rating) & (df['ProductType'] == category)]\n",
    "    \n",
    "    # Get product index\n",
    "    idx = filtered_df[filtered_df['ProductId'] == product_id].index[0]\n",
    "    \n",
    "    # Cosine similarity calculation for filtered products\n",
    "    sim_scores = list(enumerate(cosine_sim[idx]))\n",
    "    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n",
    "    \n",
    "    similar_products = [filtered_df['ProductId'].iloc[i[0]] for i in sim_scores[1:top_n+1]]\n",
    "    return similar_products\n",
    "\n",
    "# Example: Get recommendations for 'B00LLPT4HI' in 'Makeup' category with min rating 4\n",
    "recommendations = get_filtered_recommendations('B00LLPT4HI', category='Makeup')\n",
    "print(recommendations)\n",
    "\n",
    "print(df.head())  # This will show the first few rows to confirm the file is loaded properly\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdc92c93",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ed7a865",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
